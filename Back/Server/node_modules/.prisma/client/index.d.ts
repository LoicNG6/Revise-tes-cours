
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Users
 * 
 */
export type Users = {
  id: number
  firstname: string | null
  lastname: string | null
  username: string | null
  email: string
  password: string | null
  created_at: Date | null
  updated_at: Date | null
  school_id: number | null
}

/**
 * Model Schools
 * 
 */
export type Schools = {
  id: number
  name: string | null
  adress: string | null
}

/**
 * Model Roles
 * 
 */
export type Roles = {
  id: number
  entitle: string | null
}

/**
 * Model Tests
 * 
 */
export type Tests = {
  id: number
  user_id: number | null
}

/**
 * Model Sessions
 * 
 */
export type Sessions = {
  user_id: number
  role_id: number
  test_id: number
  date: Date
  mark: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject>;

  /**
   * `prisma.schools`: Exposes CRUD operations for the **Schools** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.schools.findMany()
    * ```
    */
  get schools(): Prisma.SchoolsDelegate<GlobalReject>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **Roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.RolesDelegate<GlobalReject>;

  /**
   * `prisma.tests`: Exposes CRUD operations for the **Tests** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tests
    * const tests = await prisma.tests.findMany()
    * ```
    */
  get tests(): Prisma.TestsDelegate<GlobalReject>;

  /**
   * `prisma.sessions`: Exposes CRUD operations for the **Sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.sessions.findMany()
    * ```
    */
  get sessions(): Prisma.SessionsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0
   * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Users: 'Users',
    Schools: 'Schools',
    Roles: 'Roles',
    Tests: 'Tests',
    Sessions: 'Sessions'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    sessions: number
    tests: number
  }

  export type UsersCountOutputTypeSelect = {
    sessions?: boolean
    tests?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type SchoolsCountOutputType
   */


  export type SchoolsCountOutputType = {
    users: number
  }

  export type SchoolsCountOutputTypeSelect = {
    users?: boolean
  }

  export type SchoolsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SchoolsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SchoolsCountOutputType
    : S extends undefined
    ? never
    : S extends SchoolsCountOutputTypeArgs
    ?'include' extends U
    ? SchoolsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SchoolsCountOutputType ? SchoolsCountOutputType[P] : never
  } 
    : SchoolsCountOutputType
  : SchoolsCountOutputType




  // Custom InputTypes

  /**
   * SchoolsCountOutputType without action
   */
  export type SchoolsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SchoolsCountOutputType
     * 
    **/
    select?: SchoolsCountOutputTypeSelect | null
  }



  /**
   * Count Type RolesCountOutputType
   */


  export type RolesCountOutputType = {
    sessions: number
  }

  export type RolesCountOutputTypeSelect = {
    sessions?: boolean
  }

  export type RolesCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RolesCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RolesCountOutputType
    : S extends undefined
    ? never
    : S extends RolesCountOutputTypeArgs
    ?'include' extends U
    ? RolesCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RolesCountOutputType ? RolesCountOutputType[P] : never
  } 
    : RolesCountOutputType
  : RolesCountOutputType




  // Custom InputTypes

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     * 
    **/
    select?: RolesCountOutputTypeSelect | null
  }



  /**
   * Count Type TestsCountOutputType
   */


  export type TestsCountOutputType = {
    sessions: number
  }

  export type TestsCountOutputTypeSelect = {
    sessions?: boolean
  }

  export type TestsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TestsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TestsCountOutputType
    : S extends undefined
    ? never
    : S extends TestsCountOutputTypeArgs
    ?'include' extends U
    ? TestsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TestsCountOutputType ? TestsCountOutputType[P] : never
  } 
    : TestsCountOutputType
  : TestsCountOutputType




  // Custom InputTypes

  /**
   * TestsCountOutputType without action
   */
  export type TestsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TestsCountOutputType
     * 
    **/
    select?: TestsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    school_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    username: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    school_id: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    firstname: string | null
    lastname: string | null
    username: string | null
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    school_id: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    username: number
    email: number
    password: number
    created_at: number
    updated_at: number
    school_id: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    school_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    username?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    school_id?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    username?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    school_id?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    username?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    school_id?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which Users to aggregate.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    firstname: string | null
    lastname: string | null
    username: string | null
    email: string
    password: string | null
    created_at: Date | null
    updated_at: Date | null
    school_id: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    school_id?: boolean
    schools?: boolean | SchoolsArgs
    sessions?: boolean | SessionsFindManyArgs
    tests?: boolean | TestsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type UsersInclude = {
    schools?: boolean | SchoolsArgs
    sessions?: boolean | SessionsFindManyArgs
    tests?: boolean | TestsFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type UsersGetPayload<
    S extends boolean | null | undefined | UsersArgs,
    U = keyof S
      > = S extends true
        ? Users
    : S extends undefined
    ? never
    : S extends UsersArgs | UsersFindManyArgs
    ?'include' extends U
    ? Users  & {
    [P in TrueKeys<S['include']>]:
        P extends 'schools' ? SchoolsGetPayload<S['include'][P]> | null :
        P extends 'sessions' ? Array < SessionsGetPayload<S['include'][P]>>  :
        P extends 'tests' ? Array < TestsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'schools' ? SchoolsGetPayload<S['select'][P]> | null :
        P extends 'sessions' ? Array < SessionsGetPayload<S['select'][P]>>  :
        P extends 'tests' ? Array < TestsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Users ? Users[P] : never
  } 
    : Users
  : Users


  type UsersCountArgs = Merge<
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface UsersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>> : CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs>(
      args?: SelectSubset<T, UsersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Users>>, PrismaPromise<Array<UsersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs>(
      args: SelectSubset<T, UsersCreateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs>(
      args?: SelectSubset<T, UsersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs>(
      args: SelectSubset<T, UsersDeleteArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs>(
      args: SelectSubset<T, UsersUpdateArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs>(
      args?: SelectSubset<T, UsersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs>(
      args: SelectSubset<T, UsersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs>(
      args: SelectSubset<T, UsersUpsertArgs>
    ): CheckSelect<T, Prisma__UsersClient<Users>, Prisma__UsersClient<UsersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    schools<T extends SchoolsArgs = {}>(args?: Subset<T, SchoolsArgs>): CheckSelect<T, Prisma__SchoolsClient<Schools | null >, Prisma__SchoolsClient<SchoolsGetPayload<T> | null >>;

    sessions<T extends SessionsFindManyArgs = {}>(args?: Subset<T, SessionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Sessions>>, PrismaPromise<Array<SessionsGetPayload<T>>>>;

    tests<T extends TestsFindManyArgs = {}>(args?: Subset<T, TestsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tests>>, PrismaPromise<Array<TestsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Throw an Error if a Users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Throw an Error if a Users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to create a Users.
     * 
    **/
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The data needed to update a Users.
     * 
    **/
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * The filter to search for the Users to update in case it exists.
     * 
    **/
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     * 
    **/
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
    /**
     * Filter which Users to delete.
     * 
    **/
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UsersWhereInput
  }


  /**
   * Users without action
   */
  export type UsersArgs = {
    /**
     * Select specific fields to fetch from the Users
     * 
    **/
    select?: UsersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsersInclude | null
  }



  /**
   * Model Schools
   */


  export type AggregateSchools = {
    _count: SchoolsCountAggregateOutputType | null
    _avg: SchoolsAvgAggregateOutputType | null
    _sum: SchoolsSumAggregateOutputType | null
    _min: SchoolsMinAggregateOutputType | null
    _max: SchoolsMaxAggregateOutputType | null
  }

  export type SchoolsAvgAggregateOutputType = {
    id: number | null
  }

  export type SchoolsSumAggregateOutputType = {
    id: number | null
  }

  export type SchoolsMinAggregateOutputType = {
    id: number | null
    name: string | null
    adress: string | null
  }

  export type SchoolsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    adress: string | null
  }

  export type SchoolsCountAggregateOutputType = {
    id: number
    name: number
    adress: number
    _all: number
  }


  export type SchoolsAvgAggregateInputType = {
    id?: true
  }

  export type SchoolsSumAggregateInputType = {
    id?: true
  }

  export type SchoolsMinAggregateInputType = {
    id?: true
    name?: true
    adress?: true
  }

  export type SchoolsMaxAggregateInputType = {
    id?: true
    name?: true
    adress?: true
  }

  export type SchoolsCountAggregateInputType = {
    id?: true
    name?: true
    adress?: true
    _all?: true
  }

  export type SchoolsAggregateArgs = {
    /**
     * Filter which Schools to aggregate.
     * 
    **/
    where?: SchoolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SchoolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolsMaxAggregateInputType
  }

  export type GetSchoolsAggregateType<T extends SchoolsAggregateArgs> = {
        [P in keyof T & keyof AggregateSchools]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchools[P]>
      : GetScalarType<T[P], AggregateSchools[P]>
  }




  export type SchoolsGroupByArgs = {
    where?: SchoolsWhereInput
    orderBy?: Enumerable<SchoolsOrderByWithAggregationInput>
    by: Array<SchoolsScalarFieldEnum>
    having?: SchoolsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolsCountAggregateInputType | true
    _avg?: SchoolsAvgAggregateInputType
    _sum?: SchoolsSumAggregateInputType
    _min?: SchoolsMinAggregateInputType
    _max?: SchoolsMaxAggregateInputType
  }


  export type SchoolsGroupByOutputType = {
    id: number
    name: string | null
    adress: string | null
    _count: SchoolsCountAggregateOutputType | null
    _avg: SchoolsAvgAggregateOutputType | null
    _sum: SchoolsSumAggregateOutputType | null
    _min: SchoolsMinAggregateOutputType | null
    _max: SchoolsMaxAggregateOutputType | null
  }

  type GetSchoolsGroupByPayload<T extends SchoolsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SchoolsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolsGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolsGroupByOutputType[P]>
        }
      >
    >


  export type SchoolsSelect = {
    id?: boolean
    name?: boolean
    adress?: boolean
    users?: boolean | UsersFindManyArgs
    _count?: boolean | SchoolsCountOutputTypeArgs
  }

  export type SchoolsInclude = {
    users?: boolean | UsersFindManyArgs
    _count?: boolean | SchoolsCountOutputTypeArgs
  }

  export type SchoolsGetPayload<
    S extends boolean | null | undefined | SchoolsArgs,
    U = keyof S
      > = S extends true
        ? Schools
    : S extends undefined
    ? never
    : S extends SchoolsArgs | SchoolsFindManyArgs
    ?'include' extends U
    ? Schools  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? Array < UsersGetPayload<S['include'][P]>>  :
        P extends '_count' ? SchoolsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? Array < UsersGetPayload<S['select'][P]>>  :
        P extends '_count' ? SchoolsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Schools ? Schools[P] : never
  } 
    : Schools
  : Schools


  type SchoolsCountArgs = Merge<
    Omit<SchoolsFindManyArgs, 'select' | 'include'> & {
      select?: SchoolsCountAggregateInputType | true
    }
  >

  export interface SchoolsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Schools that matches the filter.
     * @param {SchoolsFindUniqueArgs} args - Arguments to find a Schools
     * @example
     * // Get one Schools
     * const schools = await prisma.schools.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SchoolsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Schools'> extends True ? CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>> : CheckSelect<T, Prisma__SchoolsClient<Schools | null >, Prisma__SchoolsClient<SchoolsGetPayload<T> | null >>

    /**
     * Find the first Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsFindFirstArgs} args - Arguments to find a Schools
     * @example
     * // Get one Schools
     * const schools = await prisma.schools.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SchoolsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Schools'> extends True ? CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>> : CheckSelect<T, Prisma__SchoolsClient<Schools | null >, Prisma__SchoolsClient<SchoolsGetPayload<T> | null >>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.schools.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.schools.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolsWithIdOnly = await prisma.schools.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolsFindManyArgs>(
      args?: SelectSubset<T, SchoolsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Schools>>, PrismaPromise<Array<SchoolsGetPayload<T>>>>

    /**
     * Create a Schools.
     * @param {SchoolsCreateArgs} args - Arguments to create a Schools.
     * @example
     * // Create one Schools
     * const Schools = await prisma.schools.create({
     *   data: {
     *     // ... data to create a Schools
     *   }
     * })
     * 
    **/
    create<T extends SchoolsCreateArgs>(
      args: SelectSubset<T, SchoolsCreateArgs>
    ): CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>>

    /**
     * Create many Schools.
     *     @param {SchoolsCreateManyArgs} args - Arguments to create many Schools.
     *     @example
     *     // Create many Schools
     *     const schools = await prisma.schools.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolsCreateManyArgs>(
      args?: SelectSubset<T, SchoolsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Schools.
     * @param {SchoolsDeleteArgs} args - Arguments to delete one Schools.
     * @example
     * // Delete one Schools
     * const Schools = await prisma.schools.delete({
     *   where: {
     *     // ... filter to delete one Schools
     *   }
     * })
     * 
    **/
    delete<T extends SchoolsDeleteArgs>(
      args: SelectSubset<T, SchoolsDeleteArgs>
    ): CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>>

    /**
     * Update one Schools.
     * @param {SchoolsUpdateArgs} args - Arguments to update one Schools.
     * @example
     * // Update one Schools
     * const schools = await prisma.schools.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolsUpdateArgs>(
      args: SelectSubset<T, SchoolsUpdateArgs>
    ): CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>>

    /**
     * Delete zero or more Schools.
     * @param {SchoolsDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.schools.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolsDeleteManyArgs>(
      args?: SelectSubset<T, SchoolsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const schools = await prisma.schools.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolsUpdateManyArgs>(
      args: SelectSubset<T, SchoolsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Schools.
     * @param {SchoolsUpsertArgs} args - Arguments to update or create a Schools.
     * @example
     * // Update or create a Schools
     * const schools = await prisma.schools.upsert({
     *   create: {
     *     // ... data to create a Schools
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schools we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolsUpsertArgs>(
      args: SelectSubset<T, SchoolsUpsertArgs>
    ): CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>>

    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.schools.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolsCountArgs>(
      args?: Subset<T, SchoolsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolsAggregateArgs>(args: Subset<T, SchoolsAggregateArgs>): PrismaPromise<GetSchoolsAggregateType<T>>

    /**
     * Group by Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolsGroupByArgs['orderBy'] }
        : { orderBy?: SchoolsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schools.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SchoolsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UsersFindManyArgs = {}>(args?: Subset<T, UsersFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Users>>, PrismaPromise<Array<UsersGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Schools findUnique
   */
  export type SchoolsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * Throw an Error if a Schools can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Schools to fetch.
     * 
    **/
    where: SchoolsWhereUniqueInput
  }


  /**
   * Schools findFirst
   */
  export type SchoolsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * Throw an Error if a Schools can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Schools to fetch.
     * 
    **/
    where?: SchoolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     * 
    **/
    cursor?: SchoolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     * 
    **/
    distinct?: Enumerable<SchoolsScalarFieldEnum>
  }


  /**
   * Schools findMany
   */
  export type SchoolsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * Filter, which Schools to fetch.
     * 
    **/
    where?: SchoolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     * 
    **/
    cursor?: SchoolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SchoolsScalarFieldEnum>
  }


  /**
   * Schools create
   */
  export type SchoolsCreateArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * The data needed to create a Schools.
     * 
    **/
    data: XOR<SchoolsCreateInput, SchoolsUncheckedCreateInput>
  }


  /**
   * Schools createMany
   */
  export type SchoolsCreateManyArgs = {
    /**
     * The data used to create many Schools.
     * 
    **/
    data: Enumerable<SchoolsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Schools update
   */
  export type SchoolsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * The data needed to update a Schools.
     * 
    **/
    data: XOR<SchoolsUpdateInput, SchoolsUncheckedUpdateInput>
    /**
     * Choose, which Schools to update.
     * 
    **/
    where: SchoolsWhereUniqueInput
  }


  /**
   * Schools updateMany
   */
  export type SchoolsUpdateManyArgs = {
    /**
     * The data used to update Schools.
     * 
    **/
    data: XOR<SchoolsUpdateManyMutationInput, SchoolsUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     * 
    **/
    where?: SchoolsWhereInput
  }


  /**
   * Schools upsert
   */
  export type SchoolsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * The filter to search for the Schools to update in case it exists.
     * 
    **/
    where: SchoolsWhereUniqueInput
    /**
     * In case the Schools found by the `where` argument doesn't exist, create a new Schools with this data.
     * 
    **/
    create: XOR<SchoolsCreateInput, SchoolsUncheckedCreateInput>
    /**
     * In case the Schools was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SchoolsUpdateInput, SchoolsUncheckedUpdateInput>
  }


  /**
   * Schools delete
   */
  export type SchoolsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * Filter which Schools to delete.
     * 
    **/
    where: SchoolsWhereUniqueInput
  }


  /**
   * Schools deleteMany
   */
  export type SchoolsDeleteManyArgs = {
    /**
     * Filter which Schools to delete
     * 
    **/
    where?: SchoolsWhereInput
  }


  /**
   * Schools without action
   */
  export type SchoolsArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
  }



  /**
   * Model Roles
   */


  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesAvgAggregateOutputType = {
    id: number | null
  }

  export type RolesSumAggregateOutputType = {
    id: number | null
  }

  export type RolesMinAggregateOutputType = {
    id: number | null
    entitle: string | null
  }

  export type RolesMaxAggregateOutputType = {
    id: number | null
    entitle: string | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    entitle: number
    _all: number
  }


  export type RolesAvgAggregateInputType = {
    id?: true
  }

  export type RolesSumAggregateInputType = {
    id?: true
  }

  export type RolesMinAggregateInputType = {
    id?: true
    entitle?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    entitle?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    entitle?: true
    _all?: true
  }

  export type RolesAggregateArgs = {
    /**
     * Filter which Roles to aggregate.
     * 
    **/
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RolesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RolesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type RolesGroupByArgs = {
    where?: RolesWhereInput
    orderBy?: Enumerable<RolesOrderByWithAggregationInput>
    by: Array<RolesScalarFieldEnum>
    having?: RolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _avg?: RolesAvgAggregateInputType
    _sum?: RolesSumAggregateInputType
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }


  export type RolesGroupByOutputType = {
    id: number
    entitle: string | null
    _count: RolesCountAggregateOutputType | null
    _avg: RolesAvgAggregateOutputType | null
    _sum: RolesSumAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends RolesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type RolesSelect = {
    id?: boolean
    entitle?: boolean
    sessions?: boolean | SessionsFindManyArgs
    _count?: boolean | RolesCountOutputTypeArgs
  }

  export type RolesInclude = {
    sessions?: boolean | SessionsFindManyArgs
    _count?: boolean | RolesCountOutputTypeArgs
  }

  export type RolesGetPayload<
    S extends boolean | null | undefined | RolesArgs,
    U = keyof S
      > = S extends true
        ? Roles
    : S extends undefined
    ? never
    : S extends RolesArgs | RolesFindManyArgs
    ?'include' extends U
    ? Roles  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sessions' ? Array < SessionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? RolesCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sessions' ? Array < SessionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? RolesCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Roles ? Roles[P] : never
  } 
    : Roles
  : Roles


  type RolesCountArgs = Merge<
    Omit<RolesFindManyArgs, 'select' | 'include'> & {
      select?: RolesCountAggregateInputType | true
    }
  >

  export interface RolesDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Roles that matches the filter.
     * @param {RolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RolesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RolesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Roles'> extends True ? CheckSelect<T, Prisma__RolesClient<Roles>, Prisma__RolesClient<RolesGetPayload<T>>> : CheckSelect<T, Prisma__RolesClient<Roles | null >, Prisma__RolesClient<RolesGetPayload<T> | null >>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RolesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RolesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Roles'> extends True ? CheckSelect<T, Prisma__RolesClient<Roles>, Prisma__RolesClient<RolesGetPayload<T>>> : CheckSelect<T, Prisma__RolesClient<Roles | null >, Prisma__RolesClient<RolesGetPayload<T> | null >>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RolesFindManyArgs>(
      args?: SelectSubset<T, RolesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Roles>>, PrismaPromise<Array<RolesGetPayload<T>>>>

    /**
     * Create a Roles.
     * @param {RolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
    **/
    create<T extends RolesCreateArgs>(
      args: SelectSubset<T, RolesCreateArgs>
    ): CheckSelect<T, Prisma__RolesClient<Roles>, Prisma__RolesClient<RolesGetPayload<T>>>

    /**
     * Create many Roles.
     *     @param {RolesCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const roles = await prisma.roles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RolesCreateManyArgs>(
      args?: SelectSubset<T, RolesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Roles.
     * @param {RolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
    **/
    delete<T extends RolesDeleteArgs>(
      args: SelectSubset<T, RolesDeleteArgs>
    ): CheckSelect<T, Prisma__RolesClient<Roles>, Prisma__RolesClient<RolesGetPayload<T>>>

    /**
     * Update one Roles.
     * @param {RolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RolesUpdateArgs>(
      args: SelectSubset<T, RolesUpdateArgs>
    ): CheckSelect<T, Prisma__RolesClient<Roles>, Prisma__RolesClient<RolesGetPayload<T>>>

    /**
     * Delete zero or more Roles.
     * @param {RolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RolesDeleteManyArgs>(
      args?: SelectSubset<T, RolesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RolesUpdateManyArgs>(
      args: SelectSubset<T, RolesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Roles.
     * @param {RolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
    **/
    upsert<T extends RolesUpsertArgs>(
      args: SelectSubset<T, RolesUpsertArgs>
    ): CheckSelect<T, Prisma__RolesClient<Roles>, Prisma__RolesClient<RolesGetPayload<T>>>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RolesCountArgs>(
      args?: Subset<T, RolesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolesGroupByArgs['orderBy'] }
        : { orderBy?: RolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RolesClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessions<T extends SessionsFindManyArgs = {}>(args?: Subset<T, SessionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Sessions>>, PrismaPromise<Array<SessionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Roles findUnique
   */
  export type RolesFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Throw an Error if a Roles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where: RolesWhereUniqueInput
  }


  /**
   * Roles findFirst
   */
  export type RolesFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Throw an Error if a Roles can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     * 
    **/
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     * 
    **/
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * Roles findMany
   */
  export type RolesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Filter, which Roles to fetch.
     * 
    **/
    where?: RolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     * 
    **/
    orderBy?: Enumerable<RolesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     * 
    **/
    cursor?: RolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RolesScalarFieldEnum>
  }


  /**
   * Roles create
   */
  export type RolesCreateArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * The data needed to create a Roles.
     * 
    **/
    data: XOR<RolesCreateInput, RolesUncheckedCreateInput>
  }


  /**
   * Roles createMany
   */
  export type RolesCreateManyArgs = {
    /**
     * The data used to create many Roles.
     * 
    **/
    data: Enumerable<RolesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Roles update
   */
  export type RolesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * The data needed to update a Roles.
     * 
    **/
    data: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
    /**
     * Choose, which Roles to update.
     * 
    **/
    where: RolesWhereUniqueInput
  }


  /**
   * Roles updateMany
   */
  export type RolesUpdateManyArgs = {
    /**
     * The data used to update Roles.
     * 
    **/
    data: XOR<RolesUpdateManyMutationInput, RolesUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     * 
    **/
    where?: RolesWhereInput
  }


  /**
   * Roles upsert
   */
  export type RolesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * The filter to search for the Roles to update in case it exists.
     * 
    **/
    where: RolesWhereUniqueInput
    /**
     * In case the Roles found by the `where` argument doesn't exist, create a new Roles with this data.
     * 
    **/
    create: XOR<RolesCreateInput, RolesUncheckedCreateInput>
    /**
     * In case the Roles was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RolesUpdateInput, RolesUncheckedUpdateInput>
  }


  /**
   * Roles delete
   */
  export type RolesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
    /**
     * Filter which Roles to delete.
     * 
    **/
    where: RolesWhereUniqueInput
  }


  /**
   * Roles deleteMany
   */
  export type RolesDeleteManyArgs = {
    /**
     * Filter which Roles to delete
     * 
    **/
    where?: RolesWhereInput
  }


  /**
   * Roles without action
   */
  export type RolesArgs = {
    /**
     * Select specific fields to fetch from the Roles
     * 
    **/
    select?: RolesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RolesInclude | null
  }



  /**
   * Model Tests
   */


  export type AggregateTests = {
    _count: TestsCountAggregateOutputType | null
    _avg: TestsAvgAggregateOutputType | null
    _sum: TestsSumAggregateOutputType | null
    _min: TestsMinAggregateOutputType | null
    _max: TestsMaxAggregateOutputType | null
  }

  export type TestsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type TestsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type TestsMinAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type TestsMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type TestsCountAggregateOutputType = {
    id: number
    user_id: number
    _all: number
  }


  export type TestsAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type TestsSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type TestsMinAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type TestsMaxAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type TestsCountAggregateInputType = {
    id?: true
    user_id?: true
    _all?: true
  }

  export type TestsAggregateArgs = {
    /**
     * Filter which Tests to aggregate.
     * 
    **/
    where?: TestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     * 
    **/
    orderBy?: Enumerable<TestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tests
    **/
    _count?: true | TestsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestsMaxAggregateInputType
  }

  export type GetTestsAggregateType<T extends TestsAggregateArgs> = {
        [P in keyof T & keyof AggregateTests]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTests[P]>
      : GetScalarType<T[P], AggregateTests[P]>
  }




  export type TestsGroupByArgs = {
    where?: TestsWhereInput
    orderBy?: Enumerable<TestsOrderByWithAggregationInput>
    by: Array<TestsScalarFieldEnum>
    having?: TestsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestsCountAggregateInputType | true
    _avg?: TestsAvgAggregateInputType
    _sum?: TestsSumAggregateInputType
    _min?: TestsMinAggregateInputType
    _max?: TestsMaxAggregateInputType
  }


  export type TestsGroupByOutputType = {
    id: number
    user_id: number | null
    _count: TestsCountAggregateOutputType | null
    _avg: TestsAvgAggregateOutputType | null
    _sum: TestsSumAggregateOutputType | null
    _min: TestsMinAggregateOutputType | null
    _max: TestsMaxAggregateOutputType | null
  }

  type GetTestsGroupByPayload<T extends TestsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TestsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestsGroupByOutputType[P]>
            : GetScalarType<T[P], TestsGroupByOutputType[P]>
        }
      >
    >


  export type TestsSelect = {
    id?: boolean
    user_id?: boolean
    users?: boolean | UsersArgs
    sessions?: boolean | SessionsFindManyArgs
    _count?: boolean | TestsCountOutputTypeArgs
  }

  export type TestsInclude = {
    users?: boolean | UsersArgs
    sessions?: boolean | SessionsFindManyArgs
    _count?: boolean | TestsCountOutputTypeArgs
  }

  export type TestsGetPayload<
    S extends boolean | null | undefined | TestsArgs,
    U = keyof S
      > = S extends true
        ? Tests
    : S extends undefined
    ? never
    : S extends TestsArgs | TestsFindManyArgs
    ?'include' extends U
    ? Tests  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? UsersGetPayload<S['include'][P]> | null :
        P extends 'sessions' ? Array < SessionsGetPayload<S['include'][P]>>  :
        P extends '_count' ? TestsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? UsersGetPayload<S['select'][P]> | null :
        P extends 'sessions' ? Array < SessionsGetPayload<S['select'][P]>>  :
        P extends '_count' ? TestsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Tests ? Tests[P] : never
  } 
    : Tests
  : Tests


  type TestsCountArgs = Merge<
    Omit<TestsFindManyArgs, 'select' | 'include'> & {
      select?: TestsCountAggregateInputType | true
    }
  >

  export interface TestsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tests that matches the filter.
     * @param {TestsFindUniqueArgs} args - Arguments to find a Tests
     * @example
     * // Get one Tests
     * const tests = await prisma.tests.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TestsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TestsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tests'> extends True ? CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>> : CheckSelect<T, Prisma__TestsClient<Tests | null >, Prisma__TestsClient<TestsGetPayload<T> | null >>

    /**
     * Find the first Tests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsFindFirstArgs} args - Arguments to find a Tests
     * @example
     * // Get one Tests
     * const tests = await prisma.tests.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TestsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TestsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tests'> extends True ? CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>> : CheckSelect<T, Prisma__TestsClient<Tests | null >, Prisma__TestsClient<TestsGetPayload<T> | null >>

    /**
     * Find zero or more Tests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tests
     * const tests = await prisma.tests.findMany()
     * 
     * // Get first 10 Tests
     * const tests = await prisma.tests.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const testsWithIdOnly = await prisma.tests.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TestsFindManyArgs>(
      args?: SelectSubset<T, TestsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tests>>, PrismaPromise<Array<TestsGetPayload<T>>>>

    /**
     * Create a Tests.
     * @param {TestsCreateArgs} args - Arguments to create a Tests.
     * @example
     * // Create one Tests
     * const Tests = await prisma.tests.create({
     *   data: {
     *     // ... data to create a Tests
     *   }
     * })
     * 
    **/
    create<T extends TestsCreateArgs>(
      args: SelectSubset<T, TestsCreateArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Create many Tests.
     *     @param {TestsCreateManyArgs} args - Arguments to create many Tests.
     *     @example
     *     // Create many Tests
     *     const tests = await prisma.tests.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TestsCreateManyArgs>(
      args?: SelectSubset<T, TestsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tests.
     * @param {TestsDeleteArgs} args - Arguments to delete one Tests.
     * @example
     * // Delete one Tests
     * const Tests = await prisma.tests.delete({
     *   where: {
     *     // ... filter to delete one Tests
     *   }
     * })
     * 
    **/
    delete<T extends TestsDeleteArgs>(
      args: SelectSubset<T, TestsDeleteArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Update one Tests.
     * @param {TestsUpdateArgs} args - Arguments to update one Tests.
     * @example
     * // Update one Tests
     * const tests = await prisma.tests.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TestsUpdateArgs>(
      args: SelectSubset<T, TestsUpdateArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Delete zero or more Tests.
     * @param {TestsDeleteManyArgs} args - Arguments to filter Tests to delete.
     * @example
     * // Delete a few Tests
     * const { count } = await prisma.tests.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TestsDeleteManyArgs>(
      args?: SelectSubset<T, TestsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tests
     * const tests = await prisma.tests.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TestsUpdateManyArgs>(
      args: SelectSubset<T, TestsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tests.
     * @param {TestsUpsertArgs} args - Arguments to update or create a Tests.
     * @example
     * // Update or create a Tests
     * const tests = await prisma.tests.upsert({
     *   create: {
     *     // ... data to create a Tests
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tests we want to update
     *   }
     * })
    **/
    upsert<T extends TestsUpsertArgs>(
      args: SelectSubset<T, TestsUpsertArgs>
    ): CheckSelect<T, Prisma__TestsClient<Tests>, Prisma__TestsClient<TestsGetPayload<T>>>

    /**
     * Count the number of Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsCountArgs} args - Arguments to filter Tests to count.
     * @example
     * // Count the number of Tests
     * const count = await prisma.tests.count({
     *   where: {
     *     // ... the filter for the Tests we want to count
     *   }
     * })
    **/
    count<T extends TestsCountArgs>(
      args?: Subset<T, TestsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestsAggregateArgs>(args: Subset<T, TestsAggregateArgs>): PrismaPromise<GetTestsAggregateType<T>>

    /**
     * Group by Tests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestsGroupByArgs['orderBy'] }
        : { orderBy?: TestsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tests.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TestsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    sessions<T extends SessionsFindManyArgs = {}>(args?: Subset<T, SessionsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Sessions>>, PrismaPromise<Array<SessionsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tests findUnique
   */
  export type TestsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * Throw an Error if a Tests can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tests to fetch.
     * 
    **/
    where: TestsWhereUniqueInput
  }


  /**
   * Tests findFirst
   */
  export type TestsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * Throw an Error if a Tests can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tests to fetch.
     * 
    **/
    where?: TestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     * 
    **/
    orderBy?: Enumerable<TestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tests.
     * 
    **/
    cursor?: TestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tests.
     * 
    **/
    distinct?: Enumerable<TestsScalarFieldEnum>
  }


  /**
   * Tests findMany
   */
  export type TestsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * Filter, which Tests to fetch.
     * 
    **/
    where?: TestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tests to fetch.
     * 
    **/
    orderBy?: Enumerable<TestsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tests.
     * 
    **/
    cursor?: TestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tests from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tests.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TestsScalarFieldEnum>
  }


  /**
   * Tests create
   */
  export type TestsCreateArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * The data needed to create a Tests.
     * 
    **/
    data: XOR<TestsCreateInput, TestsUncheckedCreateInput>
  }


  /**
   * Tests createMany
   */
  export type TestsCreateManyArgs = {
    /**
     * The data used to create many Tests.
     * 
    **/
    data: Enumerable<TestsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tests update
   */
  export type TestsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * The data needed to update a Tests.
     * 
    **/
    data: XOR<TestsUpdateInput, TestsUncheckedUpdateInput>
    /**
     * Choose, which Tests to update.
     * 
    **/
    where: TestsWhereUniqueInput
  }


  /**
   * Tests updateMany
   */
  export type TestsUpdateManyArgs = {
    /**
     * The data used to update Tests.
     * 
    **/
    data: XOR<TestsUpdateManyMutationInput, TestsUncheckedUpdateManyInput>
    /**
     * Filter which Tests to update
     * 
    **/
    where?: TestsWhereInput
  }


  /**
   * Tests upsert
   */
  export type TestsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * The filter to search for the Tests to update in case it exists.
     * 
    **/
    where: TestsWhereUniqueInput
    /**
     * In case the Tests found by the `where` argument doesn't exist, create a new Tests with this data.
     * 
    **/
    create: XOR<TestsCreateInput, TestsUncheckedCreateInput>
    /**
     * In case the Tests was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TestsUpdateInput, TestsUncheckedUpdateInput>
  }


  /**
   * Tests delete
   */
  export type TestsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
    /**
     * Filter which Tests to delete.
     * 
    **/
    where: TestsWhereUniqueInput
  }


  /**
   * Tests deleteMany
   */
  export type TestsDeleteManyArgs = {
    /**
     * Filter which Tests to delete
     * 
    **/
    where?: TestsWhereInput
  }


  /**
   * Tests without action
   */
  export type TestsArgs = {
    /**
     * Select specific fields to fetch from the Tests
     * 
    **/
    select?: TestsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TestsInclude | null
  }



  /**
   * Model Sessions
   */


  export type AggregateSessions = {
    _count: SessionsCountAggregateOutputType | null
    _avg: SessionsAvgAggregateOutputType | null
    _sum: SessionsSumAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  export type SessionsAvgAggregateOutputType = {
    user_id: number | null
    role_id: number | null
    test_id: number | null
  }

  export type SessionsSumAggregateOutputType = {
    user_id: number | null
    role_id: number | null
    test_id: number | null
  }

  export type SessionsMinAggregateOutputType = {
    user_id: number | null
    role_id: number | null
    test_id: number | null
    date: Date | null
    mark: string | null
  }

  export type SessionsMaxAggregateOutputType = {
    user_id: number | null
    role_id: number | null
    test_id: number | null
    date: Date | null
    mark: string | null
  }

  export type SessionsCountAggregateOutputType = {
    user_id: number
    role_id: number
    test_id: number
    date: number
    mark: number
    _all: number
  }


  export type SessionsAvgAggregateInputType = {
    user_id?: true
    role_id?: true
    test_id?: true
  }

  export type SessionsSumAggregateInputType = {
    user_id?: true
    role_id?: true
    test_id?: true
  }

  export type SessionsMinAggregateInputType = {
    user_id?: true
    role_id?: true
    test_id?: true
    date?: true
    mark?: true
  }

  export type SessionsMaxAggregateInputType = {
    user_id?: true
    role_id?: true
    test_id?: true
    date?: true
    mark?: true
  }

  export type SessionsCountAggregateInputType = {
    user_id?: true
    role_id?: true
    test_id?: true
    date?: true
    mark?: true
    _all?: true
  }

  export type SessionsAggregateArgs = {
    /**
     * Filter which Sessions to aggregate.
     * 
    **/
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionsMaxAggregateInputType
  }

  export type GetSessionsAggregateType<T extends SessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessions[P]>
      : GetScalarType<T[P], AggregateSessions[P]>
  }




  export type SessionsGroupByArgs = {
    where?: SessionsWhereInput
    orderBy?: Enumerable<SessionsOrderByWithAggregationInput>
    by: Array<SessionsScalarFieldEnum>
    having?: SessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionsCountAggregateInputType | true
    _avg?: SessionsAvgAggregateInputType
    _sum?: SessionsSumAggregateInputType
    _min?: SessionsMinAggregateInputType
    _max?: SessionsMaxAggregateInputType
  }


  export type SessionsGroupByOutputType = {
    user_id: number
    role_id: number
    test_id: number
    date: Date
    mark: string | null
    _count: SessionsCountAggregateOutputType | null
    _avg: SessionsAvgAggregateOutputType | null
    _sum: SessionsSumAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  type GetSessionsGroupByPayload<T extends SessionsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionsGroupByOutputType[P]>
            : GetScalarType<T[P], SessionsGroupByOutputType[P]>
        }
      >
    >


  export type SessionsSelect = {
    user_id?: boolean
    role_id?: boolean
    test_id?: boolean
    date?: boolean
    mark?: boolean
    roles?: boolean | RolesArgs
    test?: boolean | TestsArgs
    users?: boolean | UsersArgs
  }

  export type SessionsInclude = {
    roles?: boolean | RolesArgs
    test?: boolean | TestsArgs
    users?: boolean | UsersArgs
  }

  export type SessionsGetPayload<
    S extends boolean | null | undefined | SessionsArgs,
    U = keyof S
      > = S extends true
        ? Sessions
    : S extends undefined
    ? never
    : S extends SessionsArgs | SessionsFindManyArgs
    ?'include' extends U
    ? Sessions  & {
    [P in TrueKeys<S['include']>]:
        P extends 'roles' ? RolesGetPayload<S['include'][P]> :
        P extends 'test' ? TestsGetPayload<S['include'][P]> :
        P extends 'users' ? UsersGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'roles' ? RolesGetPayload<S['select'][P]> :
        P extends 'test' ? TestsGetPayload<S['select'][P]> :
        P extends 'users' ? UsersGetPayload<S['select'][P]> :  P extends keyof Sessions ? Sessions[P] : never
  } 
    : Sessions
  : Sessions


  type SessionsCountArgs = Merge<
    Omit<SessionsFindManyArgs, 'select' | 'include'> & {
      select?: SessionsCountAggregateInputType | true
    }
  >

  export interface SessionsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sessions that matches the filter.
     * @param {SessionsFindUniqueArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sessions'> extends True ? CheckSelect<T, Prisma__SessionsClient<Sessions>, Prisma__SessionsClient<SessionsGetPayload<T>>> : CheckSelect<T, Prisma__SessionsClient<Sessions | null >, Prisma__SessionsClient<SessionsGetPayload<T> | null >>

    /**
     * Find the first Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindFirstArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sessions'> extends True ? CheckSelect<T, Prisma__SessionsClient<Sessions>, Prisma__SessionsClient<SessionsGetPayload<T>>> : CheckSelect<T, Prisma__SessionsClient<Sessions | null >, Prisma__SessionsClient<SessionsGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.sessions.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.sessions.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const sessionsWithUser_idOnly = await prisma.sessions.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends SessionsFindManyArgs>(
      args?: SelectSubset<T, SessionsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Sessions>>, PrismaPromise<Array<SessionsGetPayload<T>>>>

    /**
     * Create a Sessions.
     * @param {SessionsCreateArgs} args - Arguments to create a Sessions.
     * @example
     * // Create one Sessions
     * const Sessions = await prisma.sessions.create({
     *   data: {
     *     // ... data to create a Sessions
     *   }
     * })
     * 
    **/
    create<T extends SessionsCreateArgs>(
      args: SelectSubset<T, SessionsCreateArgs>
    ): CheckSelect<T, Prisma__SessionsClient<Sessions>, Prisma__SessionsClient<SessionsGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionsCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const sessions = await prisma.sessions.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionsCreateManyArgs>(
      args?: SelectSubset<T, SessionsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sessions.
     * @param {SessionsDeleteArgs} args - Arguments to delete one Sessions.
     * @example
     * // Delete one Sessions
     * const Sessions = await prisma.sessions.delete({
     *   where: {
     *     // ... filter to delete one Sessions
     *   }
     * })
     * 
    **/
    delete<T extends SessionsDeleteArgs>(
      args: SelectSubset<T, SessionsDeleteArgs>
    ): CheckSelect<T, Prisma__SessionsClient<Sessions>, Prisma__SessionsClient<SessionsGetPayload<T>>>

    /**
     * Update one Sessions.
     * @param {SessionsUpdateArgs} args - Arguments to update one Sessions.
     * @example
     * // Update one Sessions
     * const sessions = await prisma.sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionsUpdateArgs>(
      args: SelectSubset<T, SessionsUpdateArgs>
    ): CheckSelect<T, Prisma__SessionsClient<Sessions>, Prisma__SessionsClient<SessionsGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionsDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionsDeleteManyArgs>(
      args?: SelectSubset<T, SessionsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const sessions = await prisma.sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionsUpdateManyArgs>(
      args: SelectSubset<T, SessionsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sessions.
     * @param {SessionsUpsertArgs} args - Arguments to update or create a Sessions.
     * @example
     * // Update or create a Sessions
     * const sessions = await prisma.sessions.upsert({
     *   create: {
     *     // ... data to create a Sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sessions we want to update
     *   }
     * })
    **/
    upsert<T extends SessionsUpsertArgs>(
      args: SelectSubset<T, SessionsUpsertArgs>
    ): CheckSelect<T, Prisma__SessionsClient<Sessions>, Prisma__SessionsClient<SessionsGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.sessions.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionsCountArgs>(
      args?: Subset<T, SessionsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionsAggregateArgs>(args: Subset<T, SessionsAggregateArgs>): PrismaPromise<GetSessionsAggregateType<T>>

    /**
     * Group by Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionsGroupByArgs['orderBy'] }
        : { orderBy?: SessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    roles<T extends RolesArgs = {}>(args?: Subset<T, RolesArgs>): CheckSelect<T, Prisma__RolesClient<Roles | null >, Prisma__RolesClient<RolesGetPayload<T> | null >>;

    test<T extends TestsArgs = {}>(args?: Subset<T, TestsArgs>): CheckSelect<T, Prisma__TestsClient<Tests | null >, Prisma__TestsClient<TestsGetPayload<T> | null >>;

    users<T extends UsersArgs = {}>(args?: Subset<T, UsersArgs>): CheckSelect<T, Prisma__UsersClient<Users | null >, Prisma__UsersClient<UsersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Sessions findUnique
   */
  export type SessionsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     * 
    **/
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionsInclude | null
    /**
     * Throw an Error if a Sessions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where: SessionsWhereUniqueInput
  }


  /**
   * Sessions findFirst
   */
  export type SessionsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     * 
    **/
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionsInclude | null
    /**
     * Throw an Error if a Sessions can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * Sessions findMany
   */
  export type SessionsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     * 
    **/
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionsInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionsScalarFieldEnum>
  }


  /**
   * Sessions create
   */
  export type SessionsCreateArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     * 
    **/
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionsInclude | null
    /**
     * The data needed to create a Sessions.
     * 
    **/
    data: XOR<SessionsCreateInput, SessionsUncheckedCreateInput>
  }


  /**
   * Sessions createMany
   */
  export type SessionsCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Sessions update
   */
  export type SessionsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     * 
    **/
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionsInclude | null
    /**
     * The data needed to update a Sessions.
     * 
    **/
    data: XOR<SessionsUpdateInput, SessionsUncheckedUpdateInput>
    /**
     * Choose, which Sessions to update.
     * 
    **/
    where: SessionsWhereUniqueInput
  }


  /**
   * Sessions updateMany
   */
  export type SessionsUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionsUpdateManyMutationInput, SessionsUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionsWhereInput
  }


  /**
   * Sessions upsert
   */
  export type SessionsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     * 
    **/
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionsInclude | null
    /**
     * The filter to search for the Sessions to update in case it exists.
     * 
    **/
    where: SessionsWhereUniqueInput
    /**
     * In case the Sessions found by the `where` argument doesn't exist, create a new Sessions with this data.
     * 
    **/
    create: XOR<SessionsCreateInput, SessionsUncheckedCreateInput>
    /**
     * In case the Sessions was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionsUpdateInput, SessionsUncheckedUpdateInput>
  }


  /**
   * Sessions delete
   */
  export type SessionsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     * 
    **/
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionsInclude | null
    /**
     * Filter which Sessions to delete.
     * 
    **/
    where: SessionsWhereUniqueInput
  }


  /**
   * Sessions deleteMany
   */
  export type SessionsDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionsWhereInput
  }


  /**
   * Sessions without action
   */
  export type SessionsArgs = {
    /**
     * Select specific fields to fetch from the Sessions
     * 
    **/
    select?: SessionsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UsersScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    username: 'username',
    email: 'email',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at',
    school_id: 'school_id'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SchoolsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    adress: 'adress'
  };

  export type SchoolsScalarFieldEnum = (typeof SchoolsScalarFieldEnum)[keyof typeof SchoolsScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id: 'id',
    entitle: 'entitle'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const TestsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id'
  };

  export type TestsScalarFieldEnum = (typeof TestsScalarFieldEnum)[keyof typeof TestsScalarFieldEnum]


  export const SessionsScalarFieldEnum: {
    user_id: 'user_id',
    role_id: 'role_id',
    test_id: 'test_id',
    date: 'date',
    mark: 'mark'
  };

  export type SessionsScalarFieldEnum = (typeof SessionsScalarFieldEnum)[keyof typeof SessionsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    id?: IntFilter | number
    firstname?: StringNullableFilter | string | null
    lastname?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    email?: StringFilter | string
    password?: StringNullableFilter | string | null
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    school_id?: IntNullableFilter | number | null
    schools?: XOR<SchoolsRelationFilter, SchoolsWhereInput> | null
    sessions?: SessionsListRelationFilter
    tests?: TestsListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    school_id?: SortOrder
    schools?: SchoolsOrderByWithRelationInput
    sessions?: SessionsOrderByRelationAggregateInput
    tests?: TestsOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    school_id?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstname?: StringNullableWithAggregatesFilter | string | null
    lastname?: StringNullableWithAggregatesFilter | string | null
    username?: StringNullableWithAggregatesFilter | string | null
    email?: StringWithAggregatesFilter | string
    password?: StringNullableWithAggregatesFilter | string | null
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    school_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type SchoolsWhereInput = {
    AND?: Enumerable<SchoolsWhereInput>
    OR?: Enumerable<SchoolsWhereInput>
    NOT?: Enumerable<SchoolsWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    adress?: StringNullableFilter | string | null
    users?: UsersListRelationFilter
  }

  export type SchoolsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
    users?: UsersOrderByRelationAggregateInput
  }

  export type SchoolsWhereUniqueInput = {
    id?: number
  }

  export type SchoolsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
    _count?: SchoolsCountOrderByAggregateInput
    _avg?: SchoolsAvgOrderByAggregateInput
    _max?: SchoolsMaxOrderByAggregateInput
    _min?: SchoolsMinOrderByAggregateInput
    _sum?: SchoolsSumOrderByAggregateInput
  }

  export type SchoolsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SchoolsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SchoolsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SchoolsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    adress?: StringNullableWithAggregatesFilter | string | null
  }

  export type RolesWhereInput = {
    AND?: Enumerable<RolesWhereInput>
    OR?: Enumerable<RolesWhereInput>
    NOT?: Enumerable<RolesWhereInput>
    id?: IntFilter | number
    entitle?: StringNullableFilter | string | null
    sessions?: SessionsListRelationFilter
  }

  export type RolesOrderByWithRelationInput = {
    id?: SortOrder
    entitle?: SortOrder
    sessions?: SessionsOrderByRelationAggregateInput
  }

  export type RolesWhereUniqueInput = {
    id?: number
  }

  export type RolesOrderByWithAggregationInput = {
    id?: SortOrder
    entitle?: SortOrder
    _count?: RolesCountOrderByAggregateInput
    _avg?: RolesAvgOrderByAggregateInput
    _max?: RolesMaxOrderByAggregateInput
    _min?: RolesMinOrderByAggregateInput
    _sum?: RolesSumOrderByAggregateInput
  }

  export type RolesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RolesScalarWhereWithAggregatesInput>
    OR?: Enumerable<RolesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RolesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    entitle?: StringNullableWithAggregatesFilter | string | null
  }

  export type TestsWhereInput = {
    AND?: Enumerable<TestsWhereInput>
    OR?: Enumerable<TestsWhereInput>
    NOT?: Enumerable<TestsWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
    users?: XOR<UsersRelationFilter, UsersWhereInput> | null
    sessions?: SessionsListRelationFilter
  }

  export type TestsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    users?: UsersOrderByWithRelationInput
    sessions?: SessionsOrderByRelationAggregateInput
  }

  export type TestsWhereUniqueInput = {
    id?: number
  }

  export type TestsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    _count?: TestsCountOrderByAggregateInput
    _avg?: TestsAvgOrderByAggregateInput
    _max?: TestsMaxOrderByAggregateInput
    _min?: TestsMinOrderByAggregateInput
    _sum?: TestsSumOrderByAggregateInput
  }

  export type TestsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TestsScalarWhereWithAggregatesInput>
    OR?: Enumerable<TestsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TestsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type SessionsWhereInput = {
    AND?: Enumerable<SessionsWhereInput>
    OR?: Enumerable<SessionsWhereInput>
    NOT?: Enumerable<SessionsWhereInput>
    user_id?: IntFilter | number
    role_id?: IntFilter | number
    test_id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    mark?: StringNullableFilter | string | null
    roles?: XOR<RolesRelationFilter, RolesWhereInput>
    test?: XOR<TestsRelationFilter, TestsWhereInput>
    users?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type SessionsOrderByWithRelationInput = {
    user_id?: SortOrder
    role_id?: SortOrder
    test_id?: SortOrder
    date?: SortOrder
    mark?: SortOrder
    roles?: RolesOrderByWithRelationInput
    test?: TestsOrderByWithRelationInput
    users?: UsersOrderByWithRelationInput
  }

  export type SessionsWhereUniqueInput = {
    user_id_role_id_test_id_date?: SessionsUser_idRole_idTest_idDateCompoundUniqueInput
  }

  export type SessionsOrderByWithAggregationInput = {
    user_id?: SortOrder
    role_id?: SortOrder
    test_id?: SortOrder
    date?: SortOrder
    mark?: SortOrder
    _count?: SessionsCountOrderByAggregateInput
    _avg?: SessionsAvgOrderByAggregateInput
    _max?: SessionsMaxOrderByAggregateInput
    _min?: SessionsMinOrderByAggregateInput
    _sum?: SessionsSumOrderByAggregateInput
  }

  export type SessionsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionsScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    role_id?: IntWithAggregatesFilter | number
    test_id?: IntWithAggregatesFilter | number
    date?: DateTimeWithAggregatesFilter | Date | string
    mark?: StringNullableWithAggregatesFilter | string | null
  }

  export type UsersCreateInput = {
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    schools?: SchoolsCreateNestedOneWithoutUsersInput
    sessions?: SessionsCreateNestedManyWithoutUsersInput
    tests?: TestsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    school_id?: number | null
    sessions?: SessionsUncheckedCreateNestedManyWithoutUsersInput
    tests?: TestsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersUpdateInput = {
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schools?: SchoolsUpdateOneWithoutUsersInput
    sessions?: SessionsUpdateManyWithoutUsersInput
    tests?: TestsUpdateManyWithoutUsersInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
    sessions?: SessionsUncheckedUpdateManyWithoutUsersInput
    tests?: TestsUncheckedUpdateManyWithoutUsersInput
  }

  export type UsersCreateManyInput = {
    id?: number
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    school_id?: number | null
  }

  export type UsersUpdateManyMutationInput = {
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SchoolsCreateInput = {
    name?: string | null
    adress?: string | null
    users?: UsersCreateNestedManyWithoutSchoolsInput
  }

  export type SchoolsUncheckedCreateInput = {
    id?: number
    name?: string | null
    adress?: string | null
    users?: UsersUncheckedCreateNestedManyWithoutSchoolsInput
  }

  export type SchoolsUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UsersUpdateManyWithoutSchoolsInput
  }

  export type SchoolsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UsersUncheckedUpdateManyWithoutSchoolsInput
  }

  export type SchoolsCreateManyInput = {
    id?: number
    name?: string | null
    adress?: string | null
  }

  export type SchoolsUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchoolsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolesCreateInput = {
    entitle?: string | null
    sessions?: SessionsCreateNestedManyWithoutRolesInput
  }

  export type RolesUncheckedCreateInput = {
    id?: number
    entitle?: string | null
    sessions?: SessionsUncheckedCreateNestedManyWithoutRolesInput
  }

  export type RolesUpdateInput = {
    entitle?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionsUpdateManyWithoutRolesInput
  }

  export type RolesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    entitle?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionsUncheckedUpdateManyWithoutRolesInput
  }

  export type RolesCreateManyInput = {
    id?: number
    entitle?: string | null
  }

  export type RolesUpdateManyMutationInput = {
    entitle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    entitle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TestsCreateInput = {
    users?: UsersCreateNestedOneWithoutTestsInput
    sessions?: SessionsCreateNestedManyWithoutTestInput
  }

  export type TestsUncheckedCreateInput = {
    id?: number
    user_id?: number | null
    sessions?: SessionsUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestsUpdateInput = {
    users?: UsersUpdateOneWithoutTestsInput
    sessions?: SessionsUpdateManyWithoutTestInput
  }

  export type TestsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
    sessions?: SessionsUncheckedUpdateManyWithoutTestInput
  }

  export type TestsCreateManyInput = {
    id?: number
    user_id?: number | null
  }

  export type TestsUpdateManyMutationInput = {

  }

  export type TestsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionsCreateInput = {
    date?: Date | string
    mark?: string | null
    roles: RolesCreateNestedOneWithoutSessionsInput
    test: TestsCreateNestedOneWithoutSessionsInput
    users: UsersCreateNestedOneWithoutSessionsInput
  }

  export type SessionsUncheckedCreateInput = {
    user_id: number
    role_id: number
    test_id: number
    date?: Date | string
    mark?: string | null
  }

  export type SessionsUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: RolesUpdateOneRequiredWithoutSessionsInput
    test?: TestsUpdateOneRequiredWithoutSessionsInput
    users?: UsersUpdateOneRequiredWithoutSessionsInput
  }

  export type SessionsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    test_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionsCreateManyInput = {
    user_id: number
    role_id: number
    test_id: number
    date?: Date | string
    mark?: string | null
  }

  export type SessionsUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    test_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type SchoolsRelationFilter = {
    is?: SchoolsWhereInput | null
    isNot?: SchoolsWhereInput | null
  }

  export type SessionsListRelationFilter = {
    every?: SessionsWhereInput
    some?: SessionsWhereInput
    none?: SessionsWhereInput
  }

  export type TestsListRelationFilter = {
    every?: TestsWhereInput
    some?: TestsWhereInput
    none?: TestsWhereInput
  }

  export type SessionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TestsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    school_id?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    school_id?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    school_id?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    school_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
  }

  export type SchoolsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SchoolsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
  }

  export type SchoolsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    adress?: SortOrder
  }

  export type SchoolsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolesCountOrderByAggregateInput = {
    id?: SortOrder
    entitle?: SortOrder
  }

  export type RolesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RolesMaxOrderByAggregateInput = {
    id?: SortOrder
    entitle?: SortOrder
  }

  export type RolesMinOrderByAggregateInput = {
    id?: SortOrder
    entitle?: SortOrder
  }

  export type RolesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type TestsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type TestsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type TestsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type TestsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type TestsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type RolesRelationFilter = {
    is?: RolesWhereInput
    isNot?: RolesWhereInput
  }

  export type TestsRelationFilter = {
    is?: TestsWhereInput
    isNot?: TestsWhereInput
  }

  export type SessionsUser_idRole_idTest_idDateCompoundUniqueInput = {
    user_id: number
    role_id: number
    test_id: number
    date: Date | string
  }

  export type SessionsCountOrderByAggregateInput = {
    user_id?: SortOrder
    role_id?: SortOrder
    test_id?: SortOrder
    date?: SortOrder
    mark?: SortOrder
  }

  export type SessionsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    role_id?: SortOrder
    test_id?: SortOrder
  }

  export type SessionsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    role_id?: SortOrder
    test_id?: SortOrder
    date?: SortOrder
    mark?: SortOrder
  }

  export type SessionsMinOrderByAggregateInput = {
    user_id?: SortOrder
    role_id?: SortOrder
    test_id?: SortOrder
    date?: SortOrder
    mark?: SortOrder
  }

  export type SessionsSumOrderByAggregateInput = {
    user_id?: SortOrder
    role_id?: SortOrder
    test_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type SchoolsCreateNestedOneWithoutUsersInput = {
    create?: XOR<SchoolsCreateWithoutUsersInput, SchoolsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SchoolsCreateOrConnectWithoutUsersInput
    connect?: SchoolsWhereUniqueInput
  }

  export type SessionsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutUsersInput>, Enumerable<SessionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutUsersInput>
    createMany?: SessionsCreateManyUsersInputEnvelope
    connect?: Enumerable<SessionsWhereUniqueInput>
  }

  export type TestsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<TestsCreateWithoutUsersInput>, Enumerable<TestsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutUsersInput>
    createMany?: TestsCreateManyUsersInputEnvelope
    connect?: Enumerable<TestsWhereUniqueInput>
  }

  export type SessionsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutUsersInput>, Enumerable<SessionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutUsersInput>
    createMany?: SessionsCreateManyUsersInputEnvelope
    connect?: Enumerable<SessionsWhereUniqueInput>
  }

  export type TestsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<TestsCreateWithoutUsersInput>, Enumerable<TestsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutUsersInput>
    createMany?: TestsCreateManyUsersInputEnvelope
    connect?: Enumerable<TestsWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SchoolsUpdateOneWithoutUsersInput = {
    create?: XOR<SchoolsCreateWithoutUsersInput, SchoolsUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SchoolsCreateOrConnectWithoutUsersInput
    upsert?: SchoolsUpsertWithoutUsersInput
    disconnect?: boolean
    delete?: boolean
    connect?: SchoolsWhereUniqueInput
    update?: XOR<SchoolsUpdateWithoutUsersInput, SchoolsUncheckedUpdateWithoutUsersInput>
  }

  export type SessionsUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutUsersInput>, Enumerable<SessionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<SessionsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: SessionsCreateManyUsersInputEnvelope
    set?: Enumerable<SessionsWhereUniqueInput>
    disconnect?: Enumerable<SessionsWhereUniqueInput>
    delete?: Enumerable<SessionsWhereUniqueInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
    update?: Enumerable<SessionsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<SessionsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<SessionsScalarWhereInput>
  }

  export type TestsUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<TestsCreateWithoutUsersInput>, Enumerable<TestsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<TestsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: TestsCreateManyUsersInputEnvelope
    set?: Enumerable<TestsWhereUniqueInput>
    disconnect?: Enumerable<TestsWhereUniqueInput>
    delete?: Enumerable<TestsWhereUniqueInput>
    connect?: Enumerable<TestsWhereUniqueInput>
    update?: Enumerable<TestsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<TestsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<TestsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionsUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutUsersInput>, Enumerable<SessionsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<SessionsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: SessionsCreateManyUsersInputEnvelope
    set?: Enumerable<SessionsWhereUniqueInput>
    disconnect?: Enumerable<SessionsWhereUniqueInput>
    delete?: Enumerable<SessionsWhereUniqueInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
    update?: Enumerable<SessionsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<SessionsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<SessionsScalarWhereInput>
  }

  export type TestsUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<TestsCreateWithoutUsersInput>, Enumerable<TestsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<TestsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<TestsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: TestsCreateManyUsersInputEnvelope
    set?: Enumerable<TestsWhereUniqueInput>
    disconnect?: Enumerable<TestsWhereUniqueInput>
    delete?: Enumerable<TestsWhereUniqueInput>
    connect?: Enumerable<TestsWhereUniqueInput>
    update?: Enumerable<TestsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<TestsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<TestsScalarWhereInput>
  }

  export type UsersCreateNestedManyWithoutSchoolsInput = {
    create?: XOR<Enumerable<UsersCreateWithoutSchoolsInput>, Enumerable<UsersUncheckedCreateWithoutSchoolsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutSchoolsInput>
    createMany?: UsersCreateManySchoolsInputEnvelope
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type UsersUncheckedCreateNestedManyWithoutSchoolsInput = {
    create?: XOR<Enumerable<UsersCreateWithoutSchoolsInput>, Enumerable<UsersUncheckedCreateWithoutSchoolsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutSchoolsInput>
    createMany?: UsersCreateManySchoolsInputEnvelope
    connect?: Enumerable<UsersWhereUniqueInput>
  }

  export type UsersUpdateManyWithoutSchoolsInput = {
    create?: XOR<Enumerable<UsersCreateWithoutSchoolsInput>, Enumerable<UsersUncheckedCreateWithoutSchoolsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutSchoolsInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutSchoolsInput>
    createMany?: UsersCreateManySchoolsInputEnvelope
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutSchoolsInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutSchoolsInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type UsersUncheckedUpdateManyWithoutSchoolsInput = {
    create?: XOR<Enumerable<UsersCreateWithoutSchoolsInput>, Enumerable<UsersUncheckedCreateWithoutSchoolsInput>>
    connectOrCreate?: Enumerable<UsersCreateOrConnectWithoutSchoolsInput>
    upsert?: Enumerable<UsersUpsertWithWhereUniqueWithoutSchoolsInput>
    createMany?: UsersCreateManySchoolsInputEnvelope
    set?: Enumerable<UsersWhereUniqueInput>
    disconnect?: Enumerable<UsersWhereUniqueInput>
    delete?: Enumerable<UsersWhereUniqueInput>
    connect?: Enumerable<UsersWhereUniqueInput>
    update?: Enumerable<UsersUpdateWithWhereUniqueWithoutSchoolsInput>
    updateMany?: Enumerable<UsersUpdateManyWithWhereWithoutSchoolsInput>
    deleteMany?: Enumerable<UsersScalarWhereInput>
  }

  export type SessionsCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutRolesInput>, Enumerable<SessionsUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutRolesInput>
    createMany?: SessionsCreateManyRolesInputEnvelope
    connect?: Enumerable<SessionsWhereUniqueInput>
  }

  export type SessionsUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutRolesInput>, Enumerable<SessionsUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutRolesInput>
    createMany?: SessionsCreateManyRolesInputEnvelope
    connect?: Enumerable<SessionsWhereUniqueInput>
  }

  export type SessionsUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutRolesInput>, Enumerable<SessionsUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<SessionsUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: SessionsCreateManyRolesInputEnvelope
    set?: Enumerable<SessionsWhereUniqueInput>
    disconnect?: Enumerable<SessionsWhereUniqueInput>
    delete?: Enumerable<SessionsWhereUniqueInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
    update?: Enumerable<SessionsUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<SessionsUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<SessionsScalarWhereInput>
  }

  export type SessionsUncheckedUpdateManyWithoutRolesInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutRolesInput>, Enumerable<SessionsUncheckedCreateWithoutRolesInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutRolesInput>
    upsert?: Enumerable<SessionsUpsertWithWhereUniqueWithoutRolesInput>
    createMany?: SessionsCreateManyRolesInputEnvelope
    set?: Enumerable<SessionsWhereUniqueInput>
    disconnect?: Enumerable<SessionsWhereUniqueInput>
    delete?: Enumerable<SessionsWhereUniqueInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
    update?: Enumerable<SessionsUpdateWithWhereUniqueWithoutRolesInput>
    updateMany?: Enumerable<SessionsUpdateManyWithWhereWithoutRolesInput>
    deleteMany?: Enumerable<SessionsScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutTestsInput = {
    create?: XOR<UsersCreateWithoutTestsInput, UsersUncheckedCreateWithoutTestsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTestsInput
    connect?: UsersWhereUniqueInput
  }

  export type SessionsCreateNestedManyWithoutTestInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutTestInput>, Enumerable<SessionsUncheckedCreateWithoutTestInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutTestInput>
    createMany?: SessionsCreateManyTestInputEnvelope
    connect?: Enumerable<SessionsWhereUniqueInput>
  }

  export type SessionsUncheckedCreateNestedManyWithoutTestInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutTestInput>, Enumerable<SessionsUncheckedCreateWithoutTestInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutTestInput>
    createMany?: SessionsCreateManyTestInputEnvelope
    connect?: Enumerable<SessionsWhereUniqueInput>
  }

  export type UsersUpdateOneWithoutTestsInput = {
    create?: XOR<UsersCreateWithoutTestsInput, UsersUncheckedCreateWithoutTestsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTestsInput
    upsert?: UsersUpsertWithoutTestsInput
    disconnect?: boolean
    delete?: boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutTestsInput, UsersUncheckedUpdateWithoutTestsInput>
  }

  export type SessionsUpdateManyWithoutTestInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutTestInput>, Enumerable<SessionsUncheckedCreateWithoutTestInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutTestInput>
    upsert?: Enumerable<SessionsUpsertWithWhereUniqueWithoutTestInput>
    createMany?: SessionsCreateManyTestInputEnvelope
    set?: Enumerable<SessionsWhereUniqueInput>
    disconnect?: Enumerable<SessionsWhereUniqueInput>
    delete?: Enumerable<SessionsWhereUniqueInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
    update?: Enumerable<SessionsUpdateWithWhereUniqueWithoutTestInput>
    updateMany?: Enumerable<SessionsUpdateManyWithWhereWithoutTestInput>
    deleteMany?: Enumerable<SessionsScalarWhereInput>
  }

  export type SessionsUncheckedUpdateManyWithoutTestInput = {
    create?: XOR<Enumerable<SessionsCreateWithoutTestInput>, Enumerable<SessionsUncheckedCreateWithoutTestInput>>
    connectOrCreate?: Enumerable<SessionsCreateOrConnectWithoutTestInput>
    upsert?: Enumerable<SessionsUpsertWithWhereUniqueWithoutTestInput>
    createMany?: SessionsCreateManyTestInputEnvelope
    set?: Enumerable<SessionsWhereUniqueInput>
    disconnect?: Enumerable<SessionsWhereUniqueInput>
    delete?: Enumerable<SessionsWhereUniqueInput>
    connect?: Enumerable<SessionsWhereUniqueInput>
    update?: Enumerable<SessionsUpdateWithWhereUniqueWithoutTestInput>
    updateMany?: Enumerable<SessionsUpdateManyWithWhereWithoutTestInput>
    deleteMany?: Enumerable<SessionsScalarWhereInput>
  }

  export type RolesCreateNestedOneWithoutSessionsInput = {
    create?: XOR<RolesCreateWithoutSessionsInput, RolesUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: RolesCreateOrConnectWithoutSessionsInput
    connect?: RolesWhereUniqueInput
  }

  export type TestsCreateNestedOneWithoutSessionsInput = {
    create?: XOR<TestsCreateWithoutSessionsInput, TestsUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: TestsCreateOrConnectWithoutSessionsInput
    connect?: TestsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UsersCreateWithoutSessionsInput, UsersUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSessionsInput
    connect?: UsersWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RolesUpdateOneRequiredWithoutSessionsInput = {
    create?: XOR<RolesCreateWithoutSessionsInput, RolesUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: RolesCreateOrConnectWithoutSessionsInput
    upsert?: RolesUpsertWithoutSessionsInput
    connect?: RolesWhereUniqueInput
    update?: XOR<RolesUpdateWithoutSessionsInput, RolesUncheckedUpdateWithoutSessionsInput>
  }

  export type TestsUpdateOneRequiredWithoutSessionsInput = {
    create?: XOR<TestsCreateWithoutSessionsInput, TestsUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: TestsCreateOrConnectWithoutSessionsInput
    upsert?: TestsUpsertWithoutSessionsInput
    connect?: TestsWhereUniqueInput
    update?: XOR<TestsUpdateWithoutSessionsInput, TestsUncheckedUpdateWithoutSessionsInput>
  }

  export type UsersUpdateOneRequiredWithoutSessionsInput = {
    create?: XOR<UsersCreateWithoutSessionsInput, UsersUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSessionsInput
    upsert?: UsersUpsertWithoutSessionsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutSessionsInput, UsersUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type SchoolsCreateWithoutUsersInput = {
    name?: string | null
    adress?: string | null
  }

  export type SchoolsUncheckedCreateWithoutUsersInput = {
    id?: number
    name?: string | null
    adress?: string | null
  }

  export type SchoolsCreateOrConnectWithoutUsersInput = {
    where: SchoolsWhereUniqueInput
    create: XOR<SchoolsCreateWithoutUsersInput, SchoolsUncheckedCreateWithoutUsersInput>
  }

  export type SessionsCreateWithoutUsersInput = {
    date?: Date | string
    mark?: string | null
    roles: RolesCreateNestedOneWithoutSessionsInput
    test: TestsCreateNestedOneWithoutSessionsInput
  }

  export type SessionsUncheckedCreateWithoutUsersInput = {
    role_id: number
    test_id: number
    date?: Date | string
    mark?: string | null
  }

  export type SessionsCreateOrConnectWithoutUsersInput = {
    where: SessionsWhereUniqueInput
    create: XOR<SessionsCreateWithoutUsersInput, SessionsUncheckedCreateWithoutUsersInput>
  }

  export type SessionsCreateManyUsersInputEnvelope = {
    data: Enumerable<SessionsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type TestsCreateWithoutUsersInput = {
    sessions?: SessionsCreateNestedManyWithoutTestInput
  }

  export type TestsUncheckedCreateWithoutUsersInput = {
    id?: number
    sessions?: SessionsUncheckedCreateNestedManyWithoutTestInput
  }

  export type TestsCreateOrConnectWithoutUsersInput = {
    where: TestsWhereUniqueInput
    create: XOR<TestsCreateWithoutUsersInput, TestsUncheckedCreateWithoutUsersInput>
  }

  export type TestsCreateManyUsersInputEnvelope = {
    data: Enumerable<TestsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type SchoolsUpsertWithoutUsersInput = {
    update: XOR<SchoolsUpdateWithoutUsersInput, SchoolsUncheckedUpdateWithoutUsersInput>
    create: XOR<SchoolsCreateWithoutUsersInput, SchoolsUncheckedCreateWithoutUsersInput>
  }

  export type SchoolsUpdateWithoutUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchoolsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    adress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionsUpsertWithWhereUniqueWithoutUsersInput = {
    where: SessionsWhereUniqueInput
    update: XOR<SessionsUpdateWithoutUsersInput, SessionsUncheckedUpdateWithoutUsersInput>
    create: XOR<SessionsCreateWithoutUsersInput, SessionsUncheckedCreateWithoutUsersInput>
  }

  export type SessionsUpdateWithWhereUniqueWithoutUsersInput = {
    where: SessionsWhereUniqueInput
    data: XOR<SessionsUpdateWithoutUsersInput, SessionsUncheckedUpdateWithoutUsersInput>
  }

  export type SessionsUpdateManyWithWhereWithoutUsersInput = {
    where: SessionsScalarWhereInput
    data: XOR<SessionsUpdateManyMutationInput, SessionsUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionsScalarWhereInput = {
    AND?: Enumerable<SessionsScalarWhereInput>
    OR?: Enumerable<SessionsScalarWhereInput>
    NOT?: Enumerable<SessionsScalarWhereInput>
    user_id?: IntFilter | number
    role_id?: IntFilter | number
    test_id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    mark?: StringNullableFilter | string | null
  }

  export type TestsUpsertWithWhereUniqueWithoutUsersInput = {
    where: TestsWhereUniqueInput
    update: XOR<TestsUpdateWithoutUsersInput, TestsUncheckedUpdateWithoutUsersInput>
    create: XOR<TestsCreateWithoutUsersInput, TestsUncheckedCreateWithoutUsersInput>
  }

  export type TestsUpdateWithWhereUniqueWithoutUsersInput = {
    where: TestsWhereUniqueInput
    data: XOR<TestsUpdateWithoutUsersInput, TestsUncheckedUpdateWithoutUsersInput>
  }

  export type TestsUpdateManyWithWhereWithoutUsersInput = {
    where: TestsScalarWhereInput
    data: XOR<TestsUpdateManyMutationInput, TestsUncheckedUpdateManyWithoutTestsInput>
  }

  export type TestsScalarWhereInput = {
    AND?: Enumerable<TestsScalarWhereInput>
    OR?: Enumerable<TestsScalarWhereInput>
    NOT?: Enumerable<TestsScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntNullableFilter | number | null
  }

  export type UsersCreateWithoutSchoolsInput = {
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sessions?: SessionsCreateNestedManyWithoutUsersInput
    tests?: TestsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutSchoolsInput = {
    id?: number
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    sessions?: SessionsUncheckedCreateNestedManyWithoutUsersInput
    tests?: TestsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutSchoolsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSchoolsInput, UsersUncheckedCreateWithoutSchoolsInput>
  }

  export type UsersCreateManySchoolsInputEnvelope = {
    data: Enumerable<UsersCreateManySchoolsInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithWhereUniqueWithoutSchoolsInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutSchoolsInput, UsersUncheckedUpdateWithoutSchoolsInput>
    create: XOR<UsersCreateWithoutSchoolsInput, UsersUncheckedCreateWithoutSchoolsInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutSchoolsInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutSchoolsInput, UsersUncheckedUpdateWithoutSchoolsInput>
  }

  export type UsersUpdateManyWithWhereWithoutSchoolsInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutUsersInput>
  }

  export type UsersScalarWhereInput = {
    AND?: Enumerable<UsersScalarWhereInput>
    OR?: Enumerable<UsersScalarWhereInput>
    NOT?: Enumerable<UsersScalarWhereInput>
    id?: IntFilter | number
    firstname?: StringNullableFilter | string | null
    lastname?: StringNullableFilter | string | null
    username?: StringNullableFilter | string | null
    email?: StringFilter | string
    password?: StringNullableFilter | string | null
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    school_id?: IntNullableFilter | number | null
  }

  export type SessionsCreateWithoutRolesInput = {
    date?: Date | string
    mark?: string | null
    test: TestsCreateNestedOneWithoutSessionsInput
    users: UsersCreateNestedOneWithoutSessionsInput
  }

  export type SessionsUncheckedCreateWithoutRolesInput = {
    user_id: number
    test_id: number
    date?: Date | string
    mark?: string | null
  }

  export type SessionsCreateOrConnectWithoutRolesInput = {
    where: SessionsWhereUniqueInput
    create: XOR<SessionsCreateWithoutRolesInput, SessionsUncheckedCreateWithoutRolesInput>
  }

  export type SessionsCreateManyRolesInputEnvelope = {
    data: Enumerable<SessionsCreateManyRolesInput>
    skipDuplicates?: boolean
  }

  export type SessionsUpsertWithWhereUniqueWithoutRolesInput = {
    where: SessionsWhereUniqueInput
    update: XOR<SessionsUpdateWithoutRolesInput, SessionsUncheckedUpdateWithoutRolesInput>
    create: XOR<SessionsCreateWithoutRolesInput, SessionsUncheckedCreateWithoutRolesInput>
  }

  export type SessionsUpdateWithWhereUniqueWithoutRolesInput = {
    where: SessionsWhereUniqueInput
    data: XOR<SessionsUpdateWithoutRolesInput, SessionsUncheckedUpdateWithoutRolesInput>
  }

  export type SessionsUpdateManyWithWhereWithoutRolesInput = {
    where: SessionsScalarWhereInput
    data: XOR<SessionsUpdateManyMutationInput, SessionsUncheckedUpdateManyWithoutSessionsInput>
  }

  export type UsersCreateWithoutTestsInput = {
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    schools?: SchoolsCreateNestedOneWithoutUsersInput
    sessions?: SessionsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutTestsInput = {
    id?: number
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    school_id?: number | null
    sessions?: SessionsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutTestsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutTestsInput, UsersUncheckedCreateWithoutTestsInput>
  }

  export type SessionsCreateWithoutTestInput = {
    date?: Date | string
    mark?: string | null
    roles: RolesCreateNestedOneWithoutSessionsInput
    users: UsersCreateNestedOneWithoutSessionsInput
  }

  export type SessionsUncheckedCreateWithoutTestInput = {
    user_id: number
    role_id: number
    date?: Date | string
    mark?: string | null
  }

  export type SessionsCreateOrConnectWithoutTestInput = {
    where: SessionsWhereUniqueInput
    create: XOR<SessionsCreateWithoutTestInput, SessionsUncheckedCreateWithoutTestInput>
  }

  export type SessionsCreateManyTestInputEnvelope = {
    data: Enumerable<SessionsCreateManyTestInput>
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutTestsInput = {
    update: XOR<UsersUpdateWithoutTestsInput, UsersUncheckedUpdateWithoutTestsInput>
    create: XOR<UsersCreateWithoutTestsInput, UsersUncheckedCreateWithoutTestsInput>
  }

  export type UsersUpdateWithoutTestsInput = {
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schools?: SchoolsUpdateOneWithoutUsersInput
    sessions?: SessionsUpdateManyWithoutUsersInput
  }

  export type UsersUncheckedUpdateWithoutTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
    sessions?: SessionsUncheckedUpdateManyWithoutUsersInput
  }

  export type SessionsUpsertWithWhereUniqueWithoutTestInput = {
    where: SessionsWhereUniqueInput
    update: XOR<SessionsUpdateWithoutTestInput, SessionsUncheckedUpdateWithoutTestInput>
    create: XOR<SessionsCreateWithoutTestInput, SessionsUncheckedCreateWithoutTestInput>
  }

  export type SessionsUpdateWithWhereUniqueWithoutTestInput = {
    where: SessionsWhereUniqueInput
    data: XOR<SessionsUpdateWithoutTestInput, SessionsUncheckedUpdateWithoutTestInput>
  }

  export type SessionsUpdateManyWithWhereWithoutTestInput = {
    where: SessionsScalarWhereInput
    data: XOR<SessionsUpdateManyMutationInput, SessionsUncheckedUpdateManyWithoutSessionsInput>
  }

  export type RolesCreateWithoutSessionsInput = {
    entitle?: string | null
  }

  export type RolesUncheckedCreateWithoutSessionsInput = {
    id?: number
    entitle?: string | null
  }

  export type RolesCreateOrConnectWithoutSessionsInput = {
    where: RolesWhereUniqueInput
    create: XOR<RolesCreateWithoutSessionsInput, RolesUncheckedCreateWithoutSessionsInput>
  }

  export type TestsCreateWithoutSessionsInput = {
    users?: UsersCreateNestedOneWithoutTestsInput
  }

  export type TestsUncheckedCreateWithoutSessionsInput = {
    id?: number
    user_id?: number | null
  }

  export type TestsCreateOrConnectWithoutSessionsInput = {
    where: TestsWhereUniqueInput
    create: XOR<TestsCreateWithoutSessionsInput, TestsUncheckedCreateWithoutSessionsInput>
  }

  export type UsersCreateWithoutSessionsInput = {
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    schools?: SchoolsCreateNestedOneWithoutUsersInput
    tests?: TestsCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutSessionsInput = {
    id?: number
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    school_id?: number | null
    tests?: TestsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutSessionsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSessionsInput, UsersUncheckedCreateWithoutSessionsInput>
  }

  export type RolesUpsertWithoutSessionsInput = {
    update: XOR<RolesUpdateWithoutSessionsInput, RolesUncheckedUpdateWithoutSessionsInput>
    create: XOR<RolesCreateWithoutSessionsInput, RolesUncheckedCreateWithoutSessionsInput>
  }

  export type RolesUpdateWithoutSessionsInput = {
    entitle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolesUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    entitle?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TestsUpsertWithoutSessionsInput = {
    update: XOR<TestsUpdateWithoutSessionsInput, TestsUncheckedUpdateWithoutSessionsInput>
    create: XOR<TestsCreateWithoutSessionsInput, TestsUncheckedCreateWithoutSessionsInput>
  }

  export type TestsUpdateWithoutSessionsInput = {
    users?: UsersUpdateOneWithoutTestsInput
  }

  export type TestsUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UsersUpsertWithoutSessionsInput = {
    update: XOR<UsersUpdateWithoutSessionsInput, UsersUncheckedUpdateWithoutSessionsInput>
    create: XOR<UsersCreateWithoutSessionsInput, UsersUncheckedCreateWithoutSessionsInput>
  }

  export type UsersUpdateWithoutSessionsInput = {
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schools?: SchoolsUpdateOneWithoutUsersInput
    tests?: TestsUpdateManyWithoutUsersInput
  }

  export type UsersUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school_id?: NullableIntFieldUpdateOperationsInput | number | null
    tests?: TestsUncheckedUpdateManyWithoutUsersInput
  }

  export type SessionsCreateManyUsersInput = {
    role_id: number
    test_id: number
    date?: Date | string
    mark?: string | null
  }

  export type TestsCreateManyUsersInput = {
    id?: number
  }

  export type SessionsUpdateWithoutUsersInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: RolesUpdateOneRequiredWithoutSessionsInput
    test?: TestsUpdateOneRequiredWithoutSessionsInput
  }

  export type SessionsUncheckedUpdateWithoutUsersInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    test_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionsUncheckedUpdateManyWithoutSessionsInput = {
    role_id?: IntFieldUpdateOperationsInput | number
    test_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TestsUpdateWithoutUsersInput = {
    sessions?: SessionsUpdateManyWithoutTestInput
  }

  export type TestsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessions?: SessionsUncheckedUpdateManyWithoutTestInput
  }

  export type TestsUncheckedUpdateManyWithoutTestsInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type UsersCreateManySchoolsInput = {
    id?: number
    firstname?: string | null
    lastname?: string | null
    username?: string | null
    email: string
    password?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsersUpdateWithoutSchoolsInput = {
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionsUpdateManyWithoutUsersInput
    tests?: TestsUpdateManyWithoutUsersInput
  }

  export type UsersUncheckedUpdateWithoutSchoolsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionsUncheckedUpdateManyWithoutUsersInput
    tests?: TestsUncheckedUpdateManyWithoutUsersInput
  }

  export type UsersUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstname?: NullableStringFieldUpdateOperationsInput | string | null
    lastname?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionsCreateManyRolesInput = {
    user_id: number
    test_id: number
    date?: Date | string
    mark?: string | null
  }

  export type SessionsUpdateWithoutRolesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
    test?: TestsUpdateOneRequiredWithoutSessionsInput
    users?: UsersUpdateOneRequiredWithoutSessionsInput
  }

  export type SessionsUncheckedUpdateWithoutRolesInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    test_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionsCreateManyTestInput = {
    user_id: number
    role_id: number
    date?: Date | string
    mark?: string | null
  }

  export type SessionsUpdateWithoutTestInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: RolesUpdateOneRequiredWithoutSessionsInput
    users?: UsersUpdateOneRequiredWithoutSessionsInput
  }

  export type SessionsUncheckedUpdateWithoutTestInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    mark?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}